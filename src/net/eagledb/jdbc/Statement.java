package net.eagledb.jdbc;

import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLWarning;
import net.eagledb.server.Request;
import net.eagledb.server.RequestAction;
import net.eagledb.server.Result;

public class Statement implements java.sql.Statement {

	private net.eagledb.jdbc.Connection conn = null;

	public Statement(net.eagledb.jdbc.Connection conn) {
		this.conn = conn;
	}

	public ResultSet executeQuery(String sql) throws SQLException {
		// send request to server
		try {
			Request request = new Request(sql, RequestAction.QUERY);
			Result result = conn.sendQuery(request);
			return new ResultSet(result.fields, result.tuples);
		}
		catch(SQLException e) {
			throw e;
		}
	}

	public int executeUpdate(String sql) throws SQLException {
		// send request to server
		try {
			Request request = new Request(sql, RequestAction.UPDATE);
			Result result = conn.sendQuery(request);
			return result.code;
		}
		catch(SQLException e) {
			throw e;
		}
	}

	public void close() throws SQLException {
		// do nothing
	}

	public int getMaxFieldSize() throws SQLException {
		throw new SQLFeatureNotSupportedException();
	}

	public void setMaxFieldSize(int max) throws SQLException {
		throw new SQLFeatureNotSupportedException();
	}

	public int getMaxRows() throws SQLException {
		throw new SQLFeatureNotSupportedException();
	}

	public void setMaxRows(int max) throws SQLException {
		throw new SQLFeatureNotSupportedException();
	}

	public void setEscapeProcessing(boolean enable) throws SQLException {
		throw new SQLFeatureNotSupportedException();
	}

	public int getQueryTimeout() throws SQLException {
		throw new SQLFeatureNotSupportedException();
	}

	public void setQueryTimeout(int seconds) throws SQLException {
		throw new SQLFeatureNotSupportedException();
	}

	public void cancel() throws SQLException {
		throw new SQLFeatureNotSupportedException();
	}

	public SQLWarning getWarnings() throws SQLException {
		throw new SQLFeatureNotSupportedException();
	}

	public void clearWarnings() throws SQLException {
		throw new SQLFeatureNotSupportedException();
	}

	public void setCursorName(String name) throws SQLException {
		throw new SQLFeatureNotSupportedException();
	}

	public boolean execute(String sql) throws SQLException {
		throw new SQLFeatureNotSupportedException();
	}

	public ResultSet getResultSet() throws SQLException {
		throw new SQLFeatureNotSupportedException();
	}

	public int getUpdateCount() throws SQLException {
		throw new SQLFeatureNotSupportedException();
	}

	public boolean getMoreResults() throws SQLException {
		throw new SQLFeatureNotSupportedException();
	}

	public void setFetchDirection(int direction) throws SQLException {
		throw new SQLFeatureNotSupportedException();
	}

	public int getFetchDirection() throws SQLException {
		throw new SQLFeatureNotSupportedException();
	}

	public void setFetchSize(int rows) throws SQLException {
		throw new SQLFeatureNotSupportedException();
	}

	public int getFetchSize() throws SQLException {
		throw new SQLFeatureNotSupportedException();
	}

	public int getResultSetConcurrency() throws SQLException {
		throw new SQLFeatureNotSupportedException();
	}

	public int getResultSetType() throws SQLException {
		throw new SQLFeatureNotSupportedException();
	}

	public void addBatch(String sql) throws SQLException {
		throw new SQLFeatureNotSupportedException();
	}

	public void clearBatch() throws SQLException {
		throw new SQLFeatureNotSupportedException();
	}

	public int[] executeBatch() throws SQLException {
		throw new SQLFeatureNotSupportedException();
	}

	public Connection getConnection() throws SQLException {
		throw new SQLFeatureNotSupportedException();
	}

	public boolean getMoreResults(int current) throws SQLException {
		throw new SQLFeatureNotSupportedException();
	}

	public ResultSet getGeneratedKeys() throws SQLException {
		throw new SQLFeatureNotSupportedException();
	}

	public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
		throw new SQLFeatureNotSupportedException();
	}

	public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
		throw new SQLFeatureNotSupportedException();
	}

	public int executeUpdate(String sql, String[] columnNames) throws SQLException {
		throw new SQLFeatureNotSupportedException();
	}

	public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
		throw new SQLFeatureNotSupportedException();
	}

	public boolean execute(String sql, int[] columnIndexes) throws SQLException {
		throw new SQLFeatureNotSupportedException();
	}

	public boolean execute(String sql, String[] columnNames) throws SQLException {
		throw new SQLFeatureNotSupportedException();
	}

	public int getResultSetHoldability() throws SQLException {
		throw new SQLFeatureNotSupportedException();
	}

	public boolean isClosed() throws SQLException {
		throw new SQLFeatureNotSupportedException();
	}

	public void setPoolable(boolean poolable) throws SQLException {
		throw new SQLFeatureNotSupportedException();
	}

	public boolean isPoolable() throws SQLException {
		throw new SQLFeatureNotSupportedException();
	}

	public <T> T unwrap(Class<T> iface) throws SQLException {
		throw new SQLFeatureNotSupportedException();
	}

	public boolean isWrapperFor(Class<?> iface) throws SQLException {
		throw new SQLFeatureNotSupportedException();
	}
	
}
